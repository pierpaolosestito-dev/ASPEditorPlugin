{
	"#": {
        "#show": {
            "label": "show",
            "snippet": "show ${1:p}/${2:n}",
            "detail": "(directive) #show p/n",
            "documentation": "Shows only the predicates with specified predicate name and arity\n\n@param `p`: The predicate name of the predicates to show\n\n@param `n`: The arity of the predicates to show"
        },
        "#import_sql": {
            "label": "import_sql",
            "snippet": "import_sql(${1:databasename},\"${2:username}\",\"${3:password}\",\"${4:query}\",${5:predname})",
            "detail": "(directive) #import_sql(databasename,\"username\",\"password\",\"query\",predname[,typeConv])",
            "documentation": "Reads tuples from a table of a relational database and stores them as facts (EDB)\n\n@param `databasename`: The name of the ODBC DSN (Data Source Name)\n\n@param `username`: The name of the user who connects to the database (the string must be enclosed by \"\")\n\n@param `password`: Provides the password for that user (the string must be enclosed by \"\")\n\n@param `query`: An SQL statement that constructs the table that will be imported (the string must be enclosed by \"\")\n\n@param `predname`: The predicate name of the predicate that will be imported\n\n@param `typeConv` *OPTIONAL*: Specifies the conversion for mapping DBMS data types to I-DLV data type; it provides a conversion for each column imported by the database. It is a string with the following syntax: type: Conv [, Conv], where \"type:\" is a string constant and Conv is one of several conversion types:\n\n* U_INT: the column is converted to an unsigned integer\n\n* UT_INT: the column is truncated to an unsigned integer\n\n* UR_INT: the column is rounded to an unsigned integer\n\n* T_INT: the column is truncated to an integer\n\n* R_INT: the column is rounded to an integer\n\n* CONST: the column is converted to a string without quotes\n\n* Q_CONST: the column is converted to a string with quotes"
        },
        "#perrimerda": {
            "label": "perri",
            "snippet": "perri(${1:databasename},\"${2:username}\",\"${3:password}\",\"${4:query}\",${5:predname})",
            "detail": "(directive) #perri(databasename,\"username\",\"password\",\"query\",predname[,typeConv])",
            "documentation": "Perri zocc"
        },
        "#export_sql": {
            "label": "export_sql",
            "snippet": "export_sql(${1:databasename},\"${2:username}\",\"${3:password}\",${4:predname},${5:predarity},${6:tablename})",
            "detail": "(directive) #export_sql(databasename,\"username\",\"password\",predname,predarity,tablename[,\"REPLACE where SQL-Condition\"])",
            "documentation": "Exports the facts of a predicate to a database. If \"REPLACE where SQL-Condition\" is specified it replaces the tuples in the table tablename for which SQL-Condition holds\n\n@param `databasename`: The name of the database server\n\n@param `username`: The name of the user who connects to the database (the string must be enclosed by \"\")\n\n@param `password`: Provides the password for that user (the string must be enclosed by \"\")\n\n@param `predname`: The predicate name of the predicate that will be exported\n\n@param `predarity`: The arity of the predicate that will be exported\n\n@param `tablename`: The name of the table in which the predicate will be exported\n\n@param `\"REPLACE where SQL-Condition\"` *OPTIONAL*: The keywords REPLACE and where followed by an SQL-Condition which indicates the tuples which shall be deleted from the relational table before the export takes place"
        },
        "#import_local_sparql": {
            "label": "import_local_sparql",
            "snippet": "import_local_sparql(\"${1:rdf_file}\",\"${2:query}\",${3:predname},${4:predarity})",
            "detail": "(directive) #import_local_sparql(\"rdf_file\",\"query\",predname,predarity[,typeConv])",
            "documentation": "Imports data from a local RDF file and stores it as facts (EDB)\n\n@param `rdf_file`: The path of the RDF file (the string must be enclosed by \"\")\n\n@param `query`: A SPARQL statement (the string must be enclosed by \"\")\n\n@param `predname`: The predicate name of the predicate that will be imported\n\n@param `predarity`: The arity of the predicate that will be imported\n\n@param `typeConv` *OPTIONAL*: Specifies the conversion for mapping RDF data types to I-DLV data type; it provides a conversion for each column imported by the database. It is a string with the following syntax: type: Conv [, Conv], where \"type:\" is a string constant and Conv is one of several conversion types:\n\n* U_INT: the column is converted to an unsigned integer\n\n* UT_INT: the column is truncated to an unsigned integer\n\n* UR_INT: the column is rounded to an unsigned integer\n\n* T_INT: the column is truncated to an integer\n\n* R_INT: the column is rounded to an integer\n\n* CONST: the column is converted to a string without quotes\n\n* Q_CONST: the column is converted to a string with quotes"
        },
        "#import_remote_sparql": {
            "label": "import_remote_sparql",
            "snippet": "import_remote_sparql(\"${1:endpoint_url}\",\"${2:query}\",${3:predname},${4:predarity})",
            "detail": "(directive) #import_remote_sparql(\"endpoint_url\",\"query\",predname,predarity[,typeConv])",
            "documentation": "Imports data from a local RDF file and stores it as facts (EDB)\n\n@param `endpoint_url`: The path of the RDF file (the string must be enclosed by \"\")\n\n@param `query`: A SPARQL statement (the string must be enclosed by \"\")\n\n@param `predname`: The predicate name of the predicate that will be imported\n\n@param `predarity`: The arity of the predicate that will be imported\n\n@param `typeConv` *OPTIONAL*: Specifies the conversion for mapping RDF data types to I-DLV data type; it provides a conversion for each column imported by the database. It is a string with the following syntax: type: Conv [, Conv], where \"type:\" is a string constant and Conv is one of several conversion types:\n\n* U_INT: the column is converted to an unsigned integer\n\n* UT_INT: the column is truncated to an unsigned integer\n\n* UR_INT: the column is rounded to an unsigned integer\n\n* T_INT: the column is truncated to an integer\n\n* R_INT: the column is rounded to an integer\n\n* CONST: the column is converted to a string without quotes\n\n* Q_CONST: the column is converted to a string with quotes"
        },
        "#external_predicate_conversion": {
            "label": "external_predicate_conversion",
            "snippet": "external_predicate_conversion(&${1:p},type:${2:U_INT})",
            "detail": "(directive) #external_predicate_conversion(&p,type:T_1,...,T_N)",
            "documentation": "Customizes the mapping policy of an external predicate\n\n@param `&p`: The external predicate with N output terms\n\n@param `T_1,...,T_N`: The sequence of conversion types for the output terms. A conversion type can be:\n\n* U_INT: the output value is converted to an unsigned integer\n\n* UT_INT: the output value is truncated to an unsigned integer\n\n* UR_INT: the output value is rounded to an unsigned integer\n\n* T_INT: the output value is truncated to an integer\n\n* R_INT: the output value is rounded to an integer\n\n* CONST: the output value is converted to a string without quotes\n\n* Q_CONST: the output value is converted to a string with quotes"
        },
        "#count": {
            "label": "count",
            "snippet": "count{${1:X} : ${2:p}(${3:X})}",
            "detail": "(aggregate function) #count{terms:body}",
            "documentation": "@param `terms`: A sequence of terms\n\n@param `body`: A sequence of literals\n\n@return The number of unique instantiations of the sequence of terms"
        },
        "#sum": {
            "label": "sum",
            "snippet": "sum{${1:X} : ${2:p}(${3:X})}",
            "detail": "(aggregate function) #sum{terms:body}",
            "documentation": "@param `terms`: A sequence of terms\n\n@param `body`: A sequence of literals\n\n@return The sum of the values given to the first term in the sequence calculated over all the unique instantiations of the sequence of terms"
        },
        "#min": {
            "label": "min",
            "snippet": "min{${1:X} : ${2:p}(${3:X})}",
            "detail": "(aggregate function) #min{terms:body}",
            "documentation": "@param `terms`: A sequence of variables\n\n@param `body`: A sequence of literals\n\n@return The minimum of the values given to the first term in the sequence calculated over all the unique instantiations of the sequence of terms"
        },
        "#max": {
            "label": "max",
            "snippet": "max{${1:X} : ${2:p}(${3:X})}",
            "detail": "(aggregate function) #max{terms:body}",
            "documentation": "@param `terms`: A sequence of terms\n\n@param `body`: A sequence of literals\n\n@return The maximum of the values given to the first term in the sequence calculated over all the unique instantiations of the sequence of terms"
        },
        "#temp": {
            "label": "temp",
            "snippet": "temp ${1:a} :- ${2:l_1}, ${3:l_p}.",
            "detail": "(stream reasoning) #temp α :- l_1,..., l_b.",
            "documentation": "@param `α`: A predicate atom of the form p(t1,...,tn) as in ASP-Core-2\n\n@param `l_1,...,l_b`: A conjunction of streaming literals\n\n@return Next rule is identified as temporary rule"
        },
        "#trigger_frequency": {
            "label": "trigger_frequency",
            "snippet": "trigger_frequency(${1:U_INT}) ${2:a} :- ${3:l_1}, ${4:l_p}.",
            "detail": "(stream reasoning) #trigger_frequency(U_INT:f) α :- l_1, ..., l_b.",
            "documentation": "@param `U_INT`: The frequency according to which the rule has to be evaluated. It can be expressed in terms of milliseconds, seconds, minutes or hours by simply indicating `msec`, `sec`, `min` and `hrs` respectively.\n\n@param `α`: A predicate atom of the form p(t1,...,tn) as in ASP-Core-2\n\n@param `l_1,...,l_b`: A conjunction of streaming literals\n\n@return Next rule eill be triggered according to the specified frequency"
        }
    }
}