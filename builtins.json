{
	"&": {
        "&abs": {
            "label": "abs",
            "snippet": "abs(${1:X};${2:Z})",
            "detail": "(external atom) &abs(X;Z)",
            "documentation": "**Behaviour in assignment**\n\nAssigns the absolute value of X to Z\n\n---\n\n**Behaviour in comparison**\n\nTrue iff Z=|X| holds\n\n---\n\n**Constraints**\n\nX must be an integer"
        },
        "&int": {
            "label": "int",
            "snippet": "int(${1:X},${2:Y};${3:Z})",
            "detail": "(external atom) &int(X,Y;Z)",
            "documentation": "**Behaviour in assignment**\n\nGenerates all Z integers such that X<=Z<=Y\n\n---\n\n**Behaviour in comparison**\n\nTrue iff X<=Z<=Y holds\n\n---\n\n*Constraints**\n\nX and Y must be integers and X<=Y"
        },
        "&mod": {
            "label": "mod",
            "snippet": "mod(${1:X},${2:Y};${3:Z})", 
            "detail": "(external atom) &mod(X,Y;Z)",
            "documentation": "**Behaviour in assignment**\n\nAssigns the result of X%Y to Z\n\n---\n\n**Behaviour in comparison**\n\nTrue iff Z=X%Y\n\n---\n\n**Constraints**\n\nX and Y must be integers and Y!=0"
        },
        "&rand": {
            "label": "rand",
            "snippet": "rand(${1:X},${2:Y};${3:Z})",
            "detail": "(external atom) &rand(X,Y;Z)",
            "documentation": "**Behaviour in assignment**\n\nAssigns a random number to Z such that X<=Z<=Y\n\n---\n\n**Behaviour in comparison**\n\nTrue iff Z is equal to the selected random number\n\n---\n\n**Constraints**\n\nX and Y must be integers and X<=Y"
        },
        "&sum": {
            "label": "sum",
            "snippet": "sum(${1:X},${2:Y};${3:Z})",
            "detail": "(external atom) &sum(X,Y;Z)",
            "documentation": "**Behaviour in assignment**\n\nAssigns the result of X+Y to Z\n\n---\n\n**Behaviour in comparison**\n\nTrue iff Z=X+Y holds\n\n---\n\n**Constraints**\n\nX and Y must be integers"
        },
        "&append_str": {
            "label": "append_str",
            "snippet": "append_str(${1:X},${2:Y};${3:Z})",
            "detail": "(external atom) &append_str(X,Y;Z)",
            "documentation": "**Behaviour in assignment**\n\nAppends Y to X, the resulting string is assigned to Z\n\n---\n\n**Behaviour in comparison**\n\nTrue iff Z is equal to the string obtained by appending Y to X\n\n---\n\n**Constraints**\n\nX, Y and Z can be numeric, symbolic or string constants"
        },
        "&length_str": {
            "label": "length_str",
            "snippet": "length_str(${1:X};${2:Z})",
            "detail": "(external atom) &length_str(X;Z)",
            "documentation": "**Behaviour in assignment**\n\nAssigns the length of X to Z\n\n---\n\n**Behaviour in comparison**\n\nTrue iff Z=len(X) holds\n\n---\n\n**Constraints**\n\nX can be a numeric, symbolic or string constant. Z must be an integer"
        },
        "&member_str": {
            "label": "member_str",
            "snippet": "member_str(${1:X},${2:Y};)",
            "detail": "(external atom) &member_str(X,Y;)",
            "documentation": "**Behaviour in assignment**\n\nNone\n\n---\n\n**Behaviour in comparison**\n\nTrue iff Y contains X\n\n---\n\n**Constraints**\n\nX and Y can be numeric, symbolic or string constants"
        },
        "&reverse_str": {
            "label": "reverse_str",
            "snippet": "reverse_str(${1:X};${2:Z})",
            "detail": "(external atom) &reverse_str(X;Z)",
            "documentation": "**Behaviour in assignment**\n\nComputes the reverse of X, the resulting string is assigned to Z\n\n---\n\n**Behaviour in comparison**\n\nTrue iff Z is equal to the reverse of X\n\n---\n\n**Constraints**\n\nX and Z can be numeric, symbolic or string constants"
        },
        "&sub_str": {
            "label": "sub_str",
            "snippet": "sub_str(${1:X},${2:Y},${3:W};${4:Z})",
            "detail": "(external atom) &sub_str(X,Y,W;Z)",
            "documentation": "**Behaviour in assignment**\n\nGenerates a substring of W starting from X to Y, the resulting string is assigned to Z\n\n---\n\n**Behaviour in comparison**\n\nTrue iff Z is equal to the substring of W starting from X to Y\n\n---\n\n**Constraints**\n\nX and Y must be integers such that 1<=X<=Y<=len(W). W must be either a symbolic or string constant. Z must be a string constant"
        },
        "&to_qstr": {
            "label": "to_qstr",
            "snippet": "to_qstr(${1:X};${2:Z})",
            "detail": "(external atom) &to_qstr(X;Z)",
            "documentation": "**Behaviour in assignment**\n\nIf necessary, transforms X into a \"quoted\" string (i.e. a string constant) and assigns it to Z\n\n---\n\n**Behaviour in comparison**\n\nTrue iff Z is equal to the quoted version of X\n\n---\n\n**Constraints**\n\nX can be a numeric, symbolic or string constant. Z must be a string constant"
        },
        "&append": {
            "label": "append",
            "snippet": "append(${1:L1},${2:L2};${3:LR})",
            "detail": "(external atom) &append(L1,L2;LR)",
            "documentation": "**Behaviour in assignment**\n\nAppends L2 to L1, the resulting list is assigned to LR\n\n---\n\n**Behaviour in comparison**\n\nTrue iff LR is equal to the list obtained by appending L2 to L1\n\n---\n\n**Constraints**\n\nL1 and L2 must be list terms. LR must be either a variable or a list term"
        },
        "&delNth": {
            "label": "delNth",
            "snippet": "delNth(${1:L},${2:P};${3:LR})",
            "detail": "(external atom) &delNth(L,P;LR)",
            "documentation": "**Behaviour in assignment**\n\nDeletes the element at position P in L, the resulting list is assigned to LR\n\n---\n\n**Behaviour in comparison**\n\nTrue iff LR is equal to the list obtained by deleting the P-th element from L\n\n---\n\n**Constraints**\n\nL must be a list term. LR must be either a variable or a list term. P must be an integer such that 1<=P<=len(L)"
        },
        "&flatten": {
            "label": "flatten",
            "snippet": "flatten(${1:L};${2:LR})",
            "detail": "(external atom) &flatten(L;LR)",
            "documentation": "**Behaviour in assignment**\n\nFlattens L and assigns the resulting list to LR\n\n---\n\n**Behaviour in comparison**\n\nTrue iff LR is equal to the list obtained by flattening L\n\n---\n\n**Constraints**\n\nL must be a list term. LR must be either a variable or a list term"
        },
        "&head": {
            "label": "head",
            "snippet": "head(${1:L};${2:E})",
            "detail": "(external atom) &head(L;E)",
            "documentation": "**Behaviour in assignment**\n\nAssigns the head of L to E\n\n---\n\n**Behaviour in comparison**\n\nTrue iff E is equal to the head of L\n\n---\n\n**Constraints**\n\nL must be a list term"
        },
        "&insLast": {
            "label": "insLast",
            "snippet": "insLast(${1:L},${2:E};${3:LR})",
            "detail": "(external atom) &insLast(L,E;LR)",
            "documentation": "**Behaviour in assignment**\n\nAppends E to L, the resulting list is assigned to LR\n\n---\n\n**Behaviour in comparison**\n\nTrue iff LR is equal to the list obtained by appending E to L\n\n---\n\n**Constraints**\n\nL must be a list term. LR must be either a variable or a list term"
        },
        "&insNth": {
            "label": "insNth",
            "snippet": "insNth(${1:L},${2:E},${3:P};${4:LR})",
            "detail": "(external atom) &insNth(L,E,P;LR)",
            "documentation": "**Behaviour in assignment**\n\nInserts E at position P of L, the resulting list is assigned to LR\n\n---\n\n**Behaviour in comparison**\n\nTrue iff LR is equal to the list obtained by inserting the term E into L at position P\n\n---\n\n**Constraints**\n\nL must be a list term. LR must be either a variable or a list term. P must be an integer such that 1<=P<=len(L)"
        },
        "&last": {
            "label": "last",
            "snippet": "last(${1:L};${2:E})",
            "detail": "(external atom) &last(L;E)",
            "documentation": "**Behaviour in assignment**\n\nAssigns the last element of L to E\n\n---\n\n**Behaviour in comparison**\n\nTrue iff E is equal to the last element of L\n\n---\n\n**Constraints**\n\nL must be a list term"
        },
        "&length": {
            "label": "length",
            "snippet": "length(${1:L};${2:Z})",
            "detail": "(external atom) &length(L;Z)",
            "documentation": "**Behaviour in assignment**\n\nAssigns the length of L to Z\n\n---\n\n**Behaviour in comparison**\n\nTrue iff Z=len(L) holds\n\n---\n\n**Constraints**\n\nL must be a list term. Z must be either a variable or an integer"
        },
        "&member": {
            "label": "member",
            "snippet": "member(${1:E},${2:L};)",
            "detail": "(external atom) &member(E,L;)",
            "documentation": "**Behaviour in assignment**\n\nNone\n\n---\n\n**Behaviour in comparison**\n\nTrue iff L contains the term E\n\n---\n\n**Constraints**\n\nL must be a list term"
        },
        "&memberNth": {
            "label": "memberNth",
            "snippet": "memberNth(${1:L},${2:P};${3:E})",
            "detail": "(external atom) &memberNth(L,P;E)",
            "documentation": "**Behaviour in assignment**\n\nAssigns the term at position P of L to E\n\n---\n\n**Behaviour in comparison**\n\nTrue iff E is equal to the element at position P in L\n\n---\n\n**Constraints**\n\nL must be a list term. P must be an integer such that 1<=P<=len(L)"
        },
        "&reverse": {
            "label": "reverse",
            "snippet": "reverse(${1:L};${2:LR})",
            "detail": "(external atom) &reverse(L;LR)",
            "documentation": "**Behaviour in assignment**\n\nComputes the reverse of L, the reversed list is assigned to LR\n\n---\n\n**Behaviour in comparison**\n\nTrue iff LR is equal to the reverse of L\n\n---\n\n**Constraints**\n\nL must be a list term. LR must be either a variable or a list term"
        },
        "&reverse_r": {
            "label": "reverse_r",
            "snippet": "reverse_r(${1:L};${2:LR})",
            "detail": "(external atom) &reverse_r(L;LR)",
            "documentation": "**Behaviour in assignment**\n\nComputes the reverse of L and of all nested list terms, the reversed L is assigned to LR\n\n---\n\n**Behaviour in comparison**\n\nTrue iff LR is equal to the list obtained by reversing L and all nested list terms\n\n---\n\n**Constraints**\n\nL must be a list term. LR must be either a variable or a list term"
        },
        "&delete": {
            "label": "delete",
            "snippet": "delete(${1:E},${2:L};${3:LR})",
            "detail": "(external atom) &delete(E,L;LR)",
            "documentation": "**Behaviour in assignment**\n\nDelete all occurrences of E in L, the resulting list is assigned to LR\n\n---\n\n**Behaviour in comparison**\n\nTrue iff LR is equal to the list obtained by removing all occurences of E in L\n\n---\n\n**Constraints**\n\nL must be a list term. LR must be either a variable or a list term"
        },
        "&delete_r": {
            "label": "delete_r",
            "snippet": "delete_r(${1:E},${2:L};${3:LR})",
            "detail": "(external atom) &delete_r(E,L;LR)",
            "documentation": "**Behaviour in assignment**\n\nDelete all occurrences of E in L and in all nested list terms, the resulting list is assigned to LR\n\n---\n\n**Behaviour in comparison**\n\nTrue iff LR is equal to the list obtained by removing all occurrences of E in L and in all nested list terms\n\n---\n\n**Constraints**\n\nL must be a list term. LR must be either a variable or a list term"
        },
        "&subList": {
            "label": "subList",
            "snippet": "subList(${1:L1},${2:L2};)",
            "detail": "(external atom) &subList(L1,L2;)",
            "documentation": "**Behaviour in assignment**\n\nNone\n\n---\n\n**Behaviour in comparison**\n\nTrue iff L1 is a sublist of L2\n\n---\n\n**Constraints**\n\nL1 and L2 must be list terms"
        },
        "&tail": {
            "label": "tail",
            "snippet": "tail(${1:L};${2:E})",
            "detail": "(external atom) &tail(L;E)",
            "documentation": "**Behaviour in assignment**\n\nAssigns the tail of L to E\n\n---\n\n**Behaviour in comparison**\n\nTrue iff E is equal to the tail of L\n\n---\n\n**Constraints**\n\nL must be a list term"
        }
    }
}